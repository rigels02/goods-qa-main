<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:knBase xmlns:ns2="org.rb.qa.model">
<qaList>
<QA>
<Question>Q1. Explain JVM, JRE and JDK?</Question>
<Answer>
JVM (Java Virtual Machine): 
---------------------------
It is an abstract machine. It is a specification that provides run-time environment in which java bytecode can be executed.

JRE (Java Runtime Environment):
--------------------------------

JRE refers to a runtime environment in which java bytecode can be executed. 
It implements the JVM (Java Virtual Machine) and provides all the class libraries and other support files that JVM uses at runtime. 
So JRE is a software package that contains what is required to run a Java program.

JDK(Java Development Kit): 
--------------------------
It is the tool necessary to compile, document and package Java programs. 
The JDK completely includes JRE which contains tools for Java programmers. 
The Java Development Kit is provided free of charge. Along with JRE, it includes an interpreter/loader, a compiler (javac), an archiver (jar), 
a documentation generator (javadoc) and other tools needed in Java development. In short, it contains JRE + development tools.
</Answer>
</QA>
<QA>
<Question>
Q2. Explain public static void main(String args[]).
			</Question>
<Answer>
public : Public is an access modifier, which is used to specify who can access this method. 
Public means that this Method will be accessible by any Class.

static : It is a keyword in java which identifies it is class based i.e it can be accessed without creating the instance of a Class.

void : It is the return type of the method. Void defines the method which will not return any value.

main: It is the name of the method which is searched by JVM as a starting point for an application with a particular signature only. It is the method where the main execution occurs.

String args[] : It is the parameter passed to the main method.
			
			</Answer>
</QA>
<QA>
<Question>Q3. Why Java is platform independent?</Question>
<Answer>
Platform independent practically means "write once run anywhere". Java is called so because of its byte codes which can run on any system irrespective of its underlying operating system.
			</Answer>
</QA>
<QA>
<Question>Q4. Why java is not 100% Object-oriented?</Question>
<Answer>
Java is not 100% Object-oriented because it makes use of eight primitive datatypes such as boolean, byte, char, int, float, double, long, short which are not objects.
			</Answer>
</QA>
<QA>
<Question>Q5. What are wrapper classes?</Question>
<Answer>
Wrapper classes converts the java primitives into the reference types (objects). Every primitive data type has a class dedicated to it. These are known as wrapper classes because they "wrap" the primitive data type into an object of that class. Refer to the below image which displays different primitive type, wrapper class and constructor argument. These are: Boolean, Byte, Character, Integer, Float, Double, Long, Short.
</Answer>
</QA>
<QA>
<Question>
        Q6. What are constructors in Java?
    </Question>
<Answer>
         
        &lt;html&gt;
&lt;head&gt;

&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 style="text-align: justify;"&gt;&lt;strong&gt;&lt;span style="font-family:
verdana, geneva, sans-serif; font-size: 16px;"&gt;Q6.&amp;nbsp;What
are constructors in Java?&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p style="text-align: justify;"&gt;&lt;span style="font-family: verdana,
geneva, sans-serif; font-size: 14px;"&gt;In Java, constructor
refers to a block of code which is used to initialize an object.
It must have the same name as that of the class. Also, it has no
return type and it is automatically called when an object is
created.&lt;/span&gt;&lt;/p&gt;
&lt;p style="text-align: justify;"&gt;&lt;span style="font-family: verdana,
geneva, sans-serif; font-size: 14px;"&gt;There are two types of
constructors:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li style="text-align: justify;"&gt;&lt;span style="font-family:
verdana, geneva, sans-serif; font-size: 14px;"&gt;Default
constructor&lt;/span&gt;&lt;/li&gt;
&lt;li style="text-align: justify;"&gt;&lt;span style="font-family:
verdana, geneva, sans-serif; font-size: 14px;"&gt;Parameterized
constructor&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;
        

    </Answer>
</QA>
<QA>
<Question>Q7. What is singleton class and how can we make a class singleton?</Question>
<Answer>Singleton class is a class whose only one instance can be created at any given time, in one JVM. A class can be made singleton by making its constructor private.
</Answer>
</QA>
<QA>
<Question>Q8. What is the difference between Array list and vector?</Question>
<Answer>

&lt;html&gt;
&lt;head&gt;

&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h2 style="font-family: verdana; font-size: 16px; text-align:
center; font-weight: bold;"&gt;ArrayList vs Vector&lt;/h2&gt;
&lt;table border="1"&gt;
&lt;tbody&gt;
&lt;tr style="height: 24px;"&gt;
&lt;td style="text-align: center; height: 24px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;&lt;strong&gt;Array List&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: center; height: 24px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;&lt;strong&gt;Vector&lt;/strong&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 34px;"&gt;
&lt;td style="padding-left: 4px; height: 34px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;Array List is not synchronized.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; height: 34px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;Vector is synchronized.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 36px;"&gt;
&lt;td style="padding-left: 4px; height: 36px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Array List is fast as it's
non-synchronized.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; height: 36px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Vector is slow as it is
thread safe.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 48px;"&gt;
&lt;td style="padding-left: 4px; height: 48px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;If an element is inserted
into the Array List, it increases its Array size by 50%.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; height: 48px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Vector defaults to doubling
size of its array.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 35.5781px;"&gt;
&lt;td style="padding-left: 4px; height: 35.5781px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Array List does not define
the increment size.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; height: 35.5781px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Vector defines the increment
size.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 48px;"&gt;
&lt;td style="padding-left: 4px; height: 48px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Array List can only use
Iterator for traversing an Array List.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; height: 48px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Except Hashtable, Vector is
the only other class which uses both Enumeration and
Iterator.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;


</Answer>
</QA>
<QA>
<Question>Q9. What is the difference between equals() and == ?</Question>
<Answer>&lt;html&gt;
&lt;head&gt;

&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 style="text-align: justify;"&gt;&lt;strong&gt;&lt;span style="font-family:
verdana, geneva, sans-serif; font-size: 16px;"&gt;Q9.&amp;nbsp;What
is the difference between equals() and == ?&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p style="text-align: justify;"&gt;&lt;span style="font-family: verdana,
geneva, sans-serif; font-size: 14px;"&gt;Equals()&amp;nbsp;method is
defined in Object class in Java and used for checking equality
of two objects defined by business logic.&lt;br&gt;
&lt;/span&gt;&lt;span style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;&#8220;==&#8221; or equality operator in Java is a binary
operator provided by Java programming language and used to
compare primitives and objects.&amp;nbsp;&lt;/span&gt;&lt;span
style="font-family: verdana, geneva, sans-serif; font-size:
14px;"&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;public boolean
equals(Object o)&lt;/span&gt;&lt;/i&gt;&lt;span style="font-weight: 400;"&gt;
is the method provided by the Object class. The default
implementation uses == operator to compare two objects. For
example: method can be overridden like String class. equals()
method is used to compare the values of two objects.&lt;br&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div class="container"&gt;
&lt;div class="line number1 index0 alt2"&gt;&lt;code class="java keyword"&gt;public&lt;/code&gt;
&lt;code class="java keyword"&gt;class&lt;/code&gt; &lt;code class="java
plain"&gt;Equaltest {&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number2 index1 alt1"&gt;&lt;code class="java keyword"&gt;public&lt;/code&gt;
&lt;code class="java keyword"&gt;static&lt;/code&gt; &lt;code class="java
keyword"&gt;void&lt;/code&gt; &lt;code class="java plain"&gt;main(String[]
args) {&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number3 index2 alt2"&gt;&lt;code class="java plain"&gt;String
str1= &lt;/code&gt;&lt;code class="java keyword"&gt;new&lt;/code&gt; &lt;code
class="java plain"&gt;String(&#8220;ABCD&#8221;);&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number4 index3 alt1"&gt;&lt;code class="java plain"&gt;String
str2= &lt;/code&gt;&lt;code class="java keyword"&gt;new&lt;/code&gt; &lt;code
class="java plain"&gt;String(&#8220;ABCD&#8221;);&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number5 index4 alt2"&gt;&lt;code class="java keyword"&gt;if&lt;/code&gt;&lt;code
class="java plain"&gt;(Str1 == str2)&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number6 index5 alt1"&gt;&lt;code class="java plain"&gt;{&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number7 index6 alt2"&gt;&lt;code class="java plain"&gt;System.out.println(&lt;/code&gt;&lt;code
class="java string"&gt;"String 1 == String 2 is true"&lt;/code&gt;&lt;code
class="java plain"&gt;);&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number8 index7 alt1"&gt;&lt;code class="java plain"&gt;}&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number9 index8 alt2"&gt;&lt;code class="java keyword"&gt;else&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number10 index9 alt1"&gt;&lt;code class="java plain"&gt;{&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number11 index10 alt2"&gt;&lt;code class="java plain"&gt;System.out.println(&lt;/code&gt;&lt;code
class="java string"&gt;"String 1 == String 2 is false"&lt;/code&gt;&lt;code
class="java plain"&gt;);&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number12 index11 alt1"&gt;&lt;code class="java plain"&gt;String
Str3 = Str2;&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number13 index12 alt2"&gt;&lt;code class="java keyword"&gt;if&lt;/code&gt;&lt;code
class="java plain"&gt;( Str2 == Str3)&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number14 index13 alt1"&gt;&lt;code class="java plain"&gt;{&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number15 index14 alt2"&gt;&lt;code class="java plain"&gt;System.out.println(&lt;/code&gt;&lt;code
class="java string"&gt;"String 2 == String 3 is true"&lt;/code&gt;&lt;code
class="java plain"&gt;);&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number16 index15 alt1"&gt;&lt;code class="java plain"&gt;}&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number17 index16 alt2"&gt;&lt;code class="java keyword"&gt;else&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number18 index17 alt1"&gt;&lt;code class="java plain"&gt;{&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number19 index18 alt2"&gt;&lt;code class="java plain"&gt;System.out.println(&lt;/code&gt;&lt;code
class="java string"&gt;"String 2 == String 3 is false"&lt;/code&gt;&lt;code
class="java plain"&gt;);&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number20 index19 alt1"&gt;&lt;code class="java plain"&gt;}&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number21 index20 alt2"&gt;&lt;code class="java keyword"&gt;if&lt;/code&gt;&lt;code
class="java plain"&gt;(Str1.equals(str2))&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number22 index21 alt1"&gt;&lt;code class="java plain"&gt;{&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number23 index22 alt2"&gt;&lt;code class="java plain"&gt;System.out.println(&lt;/code&gt;&lt;code
class="java string"&gt;"String 1 equals string 2 is true"&lt;/code&gt;&lt;code
class="java plain"&gt;);&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number24 index23 alt1"&gt;&lt;code class="java plain"&gt;}&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number25 index24 alt2"&gt;&lt;code class="java keyword"&gt;else&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number26 index25 alt1"&gt;&lt;code class="java plain"&gt;{&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number27 index26 alt2"&gt;&lt;code class="java plain"&gt;System.out.prinltn(&lt;/code&gt;&lt;code
class="java string"&gt;"String 1 equals string 2 is false"&lt;/code&gt;&lt;code
class="java plain"&gt;);&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number28 index27 alt1"&gt;&lt;code class="java plain"&gt;}&lt;/code&gt;&lt;/div&gt;
&lt;div class="line number29 index28 alt2"&gt;&lt;code class="java plain"&gt;}}&lt;br&gt;
&lt;br&gt;
&lt;/code&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</Answer>
</QA>
<QA>
<Question>Q10. What are the differences between Heap and Stack Memory?</Question>
<Answer>&lt;html&gt;
&lt;head&gt;

&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 style="text-align: justify;"&gt;&lt;strong&gt;&lt;span style="font-family:
verdana, geneva, sans-serif; font-size: 16px;"&gt;Q10.&amp;nbsp;What
are the differences between Heap and Stack Memory?&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p style="text-align: justify;"&gt;&lt;span style="font-weight: 400;
font-family: verdana, geneva, sans-serif; font-size: 14px;"&gt;The
major difference between Heap and Stack memory are:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name="OOPs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 style="font-family: verdana; font-size: 16px; text-align:
center; font-weight: bold;"&gt;Stack vs Heap&lt;/h2&gt;
&lt;table style="width: 100%;" border="1"&gt;
&lt;tbody&gt;
&lt;tr style="height: 34px;"&gt;
&lt;th style="width: 145px; height: 34px; text-align: center;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;&lt;b&gt;Features&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th style="width: 676px; text-align: center; height: 34px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;&lt;b&gt;Stack&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th style="width: 771px; text-align: center; height: 34px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;&lt;strong&gt;Heap&lt;/strong&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr style="height: 48px;"&gt;
&lt;th style="width: 145px; text-align: center; height: 48px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;&lt;b&gt;Memory&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;td style="padding-left: 4px; width: 676px; height: 48px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;Stack memory is used only by one thread
of execution.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 771px; height: 48px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;Heap memory is used by all the parts of
the application.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 48px;"&gt;
&lt;th style="width: 145px; text-align: center; height: 48px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;&lt;b&gt;Access&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;td style="padding-left: 4px; width: 676px; height: 48px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;"&gt;&lt;span
style="font-size: 14px;"&gt;Stack memory can&#8217;t be accessed
by other threads.&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 771px; height: 48px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;Objects&lt;/span&gt;&lt;span style="font-family:
verdana, geneva, sans-serif; font-size: 14px;"&gt; stored in
the heap are globally accessible.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 54px;"&gt;
&lt;th style="width: 145px; text-align: center; height: 54px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;&lt;b&gt;Memory Management&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;td style="padding-left: 4px; width: 676px; height: 54px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;Follows LIFO manner to free memory.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 771px; height: 54px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;Memory management is based on generation
associated to each object.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 61.0156px;"&gt;
&lt;th style="width: 145px; text-align: center; height:
61.0156px;"&gt;&lt;span style="font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&lt;b&gt;Lifetime&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;td style="padding-left: 4px; width: 676px; height:
61.0156px;"&gt;&lt;span style="font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Exists until the end of
execution of the thread.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 771px; height:
61.0156px;"&gt;&lt;span style="font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Heap memory lives from the
start till the end of application execution.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 72px;"&gt;
&lt;th style="width: 145px; text-align: center; height: 72px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;&lt;b&gt;Usage&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;td style="padding-left: 4px; width: 676px; height: 72px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;Stack memory only contains local
primitive and reference variables to objects in heap
space.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 771px; height: 72px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 14px;"&gt;Whenever an object is created, it&#8217;s
always stored in the Heap space.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</Answer>
</QA>
<QA>
<Question>Q11. What is Polymorphism?</Question>
<Answer>Polymorphism is briefly described as &#8220;one interface, many implementations&#8221;. 
Polymorphism is a characteristic of being able to assign a different meaning or usage to something in different contexts &#8211; specifically,
 to allow an entity such as a variable, a function, or an object to have more than one form. 
There are two types of polymorphism:

   1) Compile time polymorphism
    2) Run time polymorphism

**Compile time polymorphism** is method overloading whereas **Runtime time polymorphism** is done using inheritance and interface.</Answer>
</QA>
<QA>
<Question>Q12. What is runtime polymorphism or dynamic method dispatch?</Question>
<Answer>In Java, runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved at runtime rather than at compile-time. In this process, an overridden method is called through the reference variable of a superclass. Let&#8217;s take a look at the example below to understand it better.
~~~~
class Car {
void run()
{
System.out.println(&#8220;car is running&#8221;); 
}
}
class Audi extends Car {
void run()
{
System.out.prinltn(&#8220;Audi is running safely with 100km&#8221;);
}
public static void main(String args[])
{
Car b= new Audi();    //upcasting
b.run();
}
}
~~~~</Answer>
</QA>
<QA>
<Question>Q13. What is the difference between abstract classes and interfaces?</Question>
<Answer>&lt;html&gt;
&lt;head&gt;

&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h2 style="font-family: verdana; font-size: 16px; text-align:
center; font-weight: bold;"&gt;Abstract Class vs Interfaces&lt;/h2&gt;
&lt;table border="1"&gt;
&lt;tbody&gt;
&lt;tr style="height: 27px;"&gt;
&lt;th style="width: 473.951px; height: 27px; text-align:
center;"&gt;&lt;span style="font-family: verdana, geneva,
sans-serif; font-size: 16px;"&gt;&lt;b&gt;Abstract Class&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th style="width: 497.049px; height: 27px; text-align:
center;"&gt;&lt;span style="font-family: verdana, geneva,
sans-serif; font-size: 16px;"&gt;&lt;b&gt;Interfaces&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr style="height: 34.4531px;"&gt;
&lt;td style="padding-left: 4px; width: 473.951px; height:
34.4531px;"&gt;&lt;span style="font-weight: 400; font-family:
verdana, geneva, sans-serif; font-size: 14px;"&gt;An abstract
class can provide complete, default code and/or just the
details that have to be overridden.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 497.049px; height:
34.4531px;"&gt;&lt;span style="font-weight: 400; font-family:
verdana, geneva, sans-serif; font-size: 14px;"&gt;An
interface cannot provide any code at all,just the
signature.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 28px;"&gt;
&lt;td style="padding-left: 4px; width: 473.951px; height: 28px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;In case of abstract class, a
class may extend only one abstract class.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 497.049px; height: 28px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;A Class may implement
several interfaces.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 30px;"&gt;
&lt;td style="padding-left: 4px; width: 473.951px; height: 30px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;An abstract class can have
non-abstract methods.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 497.049px; height: 30px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;All methods of an Interface
are abstract.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 27px;"&gt;
&lt;td style="padding-left: 4px; width: 473.951px; height: 27px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;An abstract class can have
instance variables.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 497.049px; height: 27px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;An Interface cannot have
instance variables&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 25px;"&gt;
&lt;td style="padding-left: 4px; width: 473.951px; height: 25px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;An abstract class can have
any visibility: public, private, protected.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 497.049px; height: 25px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;An Interface visibility must
be public (or) none.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 30px;"&gt;
&lt;td style="padding-left: 4px; width: 473.951px; height: 30px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;If we add a new method to an
abstract class then we have the option of providing
default implementation and therefore all the existing code
might work properly&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 497.049px; height: 30px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;If we add a new method to an
Interface then we have to track down all the
implementations of the interface and define implementation
for the new method&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 40px;"&gt;
&lt;td style="padding-left: 4px; width: 473.951px; height: 40px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;An abstract class can
contain constructors&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 497.049px; height: 40px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;An Interface cannot contain
constructors&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 21px;"&gt;
&lt;td style="padding-left: 4px; width: 473.951px; height: 21px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Abstract classes are fast&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 497.049px; height: 21px;"&gt;&lt;span
style="font-weight: 400;"&gt;&lt;span style="font-family:
verdana, geneva, sans-serif; font-size: 14px;"&gt;Interfaces
are slow as it requires extra indirection to find
corresponding method in the actual class&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</Answer>
</QA>
<QA>
<Question>Q14. What is method overloading and method overriding?</Question>
<Answer>Method Overloading :
------------------------
    1) In Method Overloading, Methods of the same class shares the same name but each method 
	must have different number of parameters or parameters having different types and order.
    2) Method Overloading is to &#8220;add&#8221; or &#8220;extend&#8221; more to method&#8217;s behavior.
    3) It is a compile time polymorphism.
    4) The methods must have different signature.
    5) It may or may not need inheritance in Method Overloading.

Let&#8217;s take a look at the example below to understand it better.
~~~~
class Adder {
Static int add(int a, int b)
{
return a+b;
}
Static double add( double a, double b)
{
return a+b;
}
public static void main(String args[])
{
System.out.println(Adder.add(11,11));
System.out.println(Adder.add(12.3,12.6));
}}
~~~~
Method Overriding:  
----------------------
    * In Method Overriding, sub class have the same method with same name and exactly the same
       number and type of parameters and same return type as a super class.
    * Method Overriding is to &#8220;Change&#8221; existing behavior of method.
    * It is a run time polymorphism.
    * The methods must have same signature.
    * It always requires inheritance in Method Overriding.

Let&#8217;s take a look at the example below to understand it better.
~~~~
class Car {
void run(){
System.out.println(&#8220;car is running&#8221;); 
}
Class Audi extends Car{
void run()
{
System.out.prinltn(&#8220;Audi is running safely with 100km&#8221;);
}
public static void main( String args[])
{
Car b=new Audi();
b.run();
}
}
~~~~</Answer>
</QA>
<QA>
<Question>Q15. Can you override a private or static method in Java?</Question>
<Answer>You **cannot override a private or static method** in Java.
 If you create a similar method with same return type and same method arguments in 
child class then it will hide the super class method; this is known as method hiding. 
Similarly, you cannot override a private method in sub class because it&#8217;s not accessible there. 
What you can do is create another private method with the same name in the child class. 

Let&#8217;s take a look at the example below to understand it better.
~~~~
class Base {
private static void display() {
System.out.println("Static or class method from Base");
}
public void print() {
System.out.println("Non-static or instance method from Base");
}
class Derived extends Base {
private static void display() {
System.out.println("Static or class method from Derived");
}
public void print() {
System.out.println("Non-static or instance method from Derived");
}
public class test {
public static void main(String args[])
{
Base obj= new Derived();
obj.display();
obj.print();
}
}
~~~~</Answer>
</QA>
<QA>
<Question>Q16. What is multiple inheritance? Is it supported by Java?</Question>
<Answer>If a child class inherits the property from multiple classes is known as multiple inheritance. Java does not allow to extend multiple classes.

The problem with multiple inheritance is that if multiple parent classes have a same method name, then at runtime it becomes difficult for the compiler to decide which method to execute from the child class.

Therefore, Java doesn&#8217;t support multiple inheritance. The problem is commonly referred as Diamond Problem.</Answer>
</QA>
<QA>
<Question>Q17. What is association?</Question>
<Answer>Association is a relationship where **all object have their own lifecycle and there is no owner**. 
Let&#8217;s take an example of Teacher and Student. Multiple students can associate with a single teacher and a single student 
can associate with multiple teachers but there is no ownership between the objects and both have their own lifecycle. 
These relationship can be one to one, One to many, many to one and many to many.
Associations can be described as a "has-a" relationship because the typical implementation in Java is through the use of an instance field. 
The relationship can be bi-directional with each class holding a reference to the other. 
**Aggregation** and **composition** are types of association relationships.</Answer>
</QA>
<QA>
<Question>Q18. What do you mean by aggregation?</Question>
<Answer>Aggregation is a specialized form of Association where all object have their own lifecycle but there is **ownership** 
and child object can not belongs to another parent object.
Aggregation in Java is a relationship between two classes that is best described as a "has-a" and "whole/part" relationship.
Let&#8217;s take an example of Department and teacher. A single **teacher can not belongs to multiple departments**, 
but if we delete the department teacher object will not destroy.</Answer>
</QA>
<QA>
<Question>Q19. What is composition in Java?</Question>
<Answer>Composition is again specialized form of Aggregation and we can call this as a &#8220;death&#8221; relationship. 
It is a strong type of Aggregation. **Child object dose not have their lifecycle and if parent object deletes all child object 
will also be deleted.** 
Java composition is a design correlation between two classes that is based on the &#8220;has-a&#8221; and &#8220;whole/part&#8221; associations and
owner's responsibilty of childs lifecycle.
Let&#8217;s take again an example of relationship between House and rooms. House can contain multiple rooms there is no independent life of room and any room can not belongs to two different house if we delete the house room will automatically delete.</Answer>
</QA>
<QA>
<Question>Q20. What is a servlet?</Question>
<Answer>&lt;html&gt;
&lt;head&gt;

&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;ul&gt;
&lt;li style="font-weight: 400; text-align: justify;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Java Servlet is server side
technologies to extend the capability of web servers by
providing support for dynamic response and data persistence.&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400; text-align: justify;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;The javax.servlet and
javax.servlet.http packages provide interfaces and classes for
writing our own servlets.&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400; text-align: justify;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;All servlets must implement the
javax.servlet.Servlet interface, which defines servlet
lifecycle methods. When implementing a generic service, we can
extend the GenericServlet class provided with the Java Servlet
API. The HttpServlet class provides methods, such as doGet()
and doPost(), for handling HTTP-specific services.&lt;/span&gt;&lt;/li&gt;
&lt;li style="font-weight: 400; text-align: justify;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Most of the times, web
applications are accessed using HTTP protocol and thats why we
mostly extend HttpServlet class. Servlet API hierarchy is
shown in below image.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span itemprop="upvoteCount" class="vote-count-post "&gt;&lt;/span&gt;&amp;nbsp;
&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="votecell"&gt;&lt;br&gt;
&lt;/td&gt;
&lt;td class="answercell"&gt;
&lt;div class="post-text" itemprop="text"&gt;
&lt;p&gt;&lt;a
href="http://docs.oracle.com/javaee/6/api/javax/servlet/Servlet.html"
rel="noreferrer"&gt;javax.servlet.Servlet&lt;/a&gt; is
interface, it defines methods for all the
implementations - that's what interfaces usually do.&lt;/p&gt;
&lt;p&gt;&lt;a
href="http://docs.oracle.com/javaee/6/api/javax/servlet/GenericServlet.html"
rel="noreferrer"&gt;javax.servlet.GenericServlet&lt;/a&gt; is
protocol independent. It is abstract, so it is not to be
directly instantiated. It is usable class to extend if
you some day have to write servlet for protocol other
than HTTP.&lt;/p&gt;
&lt;p&gt;&lt;a
href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html"
rel="noreferrer"&gt;javax.servlet.http.HttpServlet&lt;/a&gt; is
abstract class to be extended if you want to communicate
over HTTP protocol. Most likely you only have to care
about this one.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</Answer>
</QA>
<QA>
<Question>Q21. What are the differences between Get and Post methods?</Question>
<Answer>&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h2 style="font-family: verdana; font-size: 16px; text-align:
center; font-weight: bold;"&gt;Get vs Post&lt;/h2&gt;
&lt;table style="width: 100%;" border="1"&gt;
&lt;tbody&gt;
&lt;tr style="height: 24px;"&gt;
&lt;th style="width: 371px; text-align: center; height: 24px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 16px;"&gt;&lt;b&gt;Get&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th style="width: 391px; text-align: center; height: 24px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 16px;"&gt;&lt;b&gt;Post&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr style="height: 48px;"&gt;
&lt;td style="padding-left: 4px; width: 371px; height: 48px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Limited amount of data can
be sent because data is sent in header.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 391px; height: 48px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Large amount of data can be
sent because data is sent in body.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 37px;"&gt;
&lt;td style="width: 371px; height: 37px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;Not Secured because
data is exposed in URL bar.&lt;/span&gt;&lt;/td&gt;
&lt;td style="width: 391px; height: 37px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;Secured because data
is not exposed in URL bar.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 33px;"&gt;
&lt;td style="width: 371px; height: 33px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;Can be bookmarked&lt;/span&gt;&lt;/td&gt;
&lt;td style="width: 391px; height: 33px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;Cannot be bookmarked&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 36px;"&gt;
&lt;td style="width: 371px; height: 36px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;Idempotent*&lt;/span&gt;&lt;/td&gt;
&lt;td style="width: 391px; height: 36px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;Non-Idempotent&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 39.6719px;"&gt;
&lt;td style="width: 371px; height: 39.6719px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;It is more efficient
and used than Post&lt;/span&gt;&lt;/td&gt;
&lt;td style="width: 391px; height: 39.6719px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;It is less efficient
and used&lt;br&gt;
&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
*&lt;span class="st" data-hveid="73"
data-ved="0ahUKEwjxioe5rcjXAhXCjZQKHa34DcoQ4EUISTAC"&gt; For an
operation (or service call) to be &lt;em&gt;idempotent&lt;/em&gt;, clients
can make that same call repeatedly while producing the same
result.&lt;/span&gt;&lt;br&gt;
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</Answer>
</QA>
<QA>
<Question>Q22. What is Request Dispatcher?</Question>
<Answer>&lt;html&gt;
&lt;head&gt;

&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 style="text-align: justify;"&gt;&lt;span style="font-family: verdana,
geneva, sans-serif; font-size: 16px;"&gt;&lt;strong&gt;Q3.&amp;nbsp;What is
Request Dispatcher?&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p style="text-align: justify;"&gt;&lt;span style="font-family: verdana,
geneva, sans-serif; font-size: 14px;"&gt;RequestDispatcher
interface is used to forward the request to another resource
that can be HTML, JSP or another servlet in same application. &lt;br&gt;
We can also use this to include the content of another resource
to the response.&lt;/span&gt;&lt;/p&gt;
&lt;p style="text-align: justify;"&gt;&lt;span style="font-family: verdana,
geneva, sans-serif; font-size: 14px;"&gt;There are two methods
defined in this interface:&lt;/span&gt;&lt;/p&gt;
&lt;p style="text-align: justify;"&gt;&lt;span style="font-family: verdana,
geneva, sans-serif; font-size: 14px;"&gt;1.void forward()&lt;/span&gt;&lt;/p&gt;
&lt;p style="text-align: justify;"&gt;&lt;span style="font-family: verdana,
geneva, sans-serif; font-size: 14px;"&gt;2.void include()&lt;br&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;img
src="https://cdn.edureka.co/blog/wp-content/uploads/2017/04/Forward-Method.png"
alt="pic" width="527" height="200"&gt;&lt;br&gt;
&lt;br&gt;
&lt;img
src="https://cdn.edureka.co/blog/wp-content/uploads/2017/04/Include-Method.png"
alt="pic2" width="527" height="200"&gt;&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</Answer>
</QA>
<QA>
<Question>Q23. What are the differences between forward() method and sendRedirect() methods?</Question>
<Answer>&lt;html&gt;
&lt;head&gt;

&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 style="text-align: justify;"&gt;&lt;strong&gt;&lt;span style="font-family:
verdana, geneva, sans-serif; font-size: 16px;"&gt;What are the
differences between forward() method and sendRedirect()
methods?&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;div&gt;
&lt;h2 style="font-family: verdana; font-size: 16px; text-align:
center; font-weight: bold;"&gt;Forward() vs SendRedirect()&lt;/h2&gt;
&lt;table style="width: 100%;" border="1"&gt;
&lt;tbody&gt;
&lt;tr style="height: 24.875px;"&gt;
&lt;th style="text-align: center; height: 24.875px; width:
375px;"&gt;&lt;span style="font-family: verdana, geneva,
sans-serif; font-size: 16px;"&gt;&lt;b&gt;Forward() method&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th style="text-align: center; height: 24.875px; width:
381px;"&gt;&lt;span style="font-family: verdana, geneva,
sans-serif; font-size: 16px;"&gt;&lt;b&gt;SendRedirect() method&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr style="height: 53px;"&gt;
&lt;td style="padding-left: 4px; height: 53px; width: 375px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;forward() sends the same
request to another resource.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; height: 53px; width: 381px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;sendRedirect() method
sends new request always because it uses the URL bar of
the browser.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 35px;"&gt;
&lt;td style="height: 35px; width: 375px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;forward() method
works at server side.&lt;/span&gt;&lt;/td&gt;
&lt;td style="height: 35px; width: 381px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;sendRedirect()
method works at client side.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 48px;"&gt;
&lt;td style="height: 48px; width: 375px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;&amp;nbsp;forward() method
works within the server only.&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; height: 48px; width: 381px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;sendRedirect() method
works within and outside the server.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</Answer>
</QA>
<QA>
<Question>Q24. What is the life-cycle of a servlet?</Question>
<Answer>What is the life-cycle of a servlet?
======================
There are 5 stages in the lifecycle of a servlet:


  1. Servlet is loaded
  2. Servlet is instantiated
  3. Servlet is initialized
  4. Service the request
  5. Servlet is destroyed</Answer>
</QA>
<QA>
<Question>Q25. How does cookies work in Servlets?</Question>
<Answer>How does cookies work in Servlets?
========================

  -  Cookies are text data sent by server to the client and it gets saved at the client local machine.
  -  Servlet API provides cookies support through javax.servlet.http.Cookie class that implements Serializable and Cloneable interfaces.
  -  HttpServletRequest getCookies() method is provided to get the array of Cookies from request, since there is no point of adding Cookie to request, there are no methods to set or add cookie to request.
  -  Similarly HttpServletResponse addCookie(Cookie c) method is provided to attach cookie in response header, there are no getter methods for cookie.</Answer>
</QA>
<QA>
<Question>Q26. What are the differences between ServletContext vs ServletConfig?</Question>
<Answer>&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p style="text-align: justify;"&gt;&lt;span style="font-weight: 400;
font-family: verdana, geneva, sans-serif; font-size: 14px;"&gt;The
difference between ServletContext and ServletConfig in Servlets
JSP is in below tabular format.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style="font-family: verdana; font-size: 16px; text-align:
center; font-weight: bold;"&gt;ServletConfig vs ServletContext&lt;/h2&gt;
&lt;table style="width: 100%;" border="1"&gt;
&lt;tbody&gt;
&lt;tr style="height: 24px;"&gt;
&lt;th style="text-align: center; width: 368px; height: 24px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 16px;"&gt;&lt;b&gt;ServletConfig&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;th style="text-align: center; width: 402px; height: 24px;"&gt;&lt;span
style="font-family: verdana, geneva, sans-serif;
font-size: 16px;"&gt;&lt;b&gt;ServletContext&lt;/b&gt;&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr style="height: 48px;"&gt;
&lt;td style="padding-left: 4px; width: 368px; height: 48px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Servlet config object
represent single servlet&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 402px; height: 48px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;It represent whole web
application running on particular JVM and common for all
the servlet&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 56.75px;"&gt;
&lt;td style="padding-left: 4px; width: 368px; height: 56.75px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Its like local parameter
associated with particular servlet&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 402px; height: 56.75px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;Its like global parameter
associated with whole application&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 58px;"&gt;
&lt;td style="padding-left: 4px; width: 368px; height: 58px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;It&#8217;s a name value pair
defined inside the servlet section of web.xml file so it
has servlet wide scope&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 402px; height: 58px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;ServletContext has
application wide scope so define outside of servlet tag in
web.xml file.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 57px;"&gt;
&lt;td style="padding-left: 4px; width: 368px; height: 57px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;getServletConfig() method is
used to get the config object&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 402px; height: 57px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;getServletContext() method
is &amp;nbsp;used to get the context object.&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style="height: 72px;"&gt;
&lt;td style="padding-left: 4px; width: 368px; height: 72px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;for example shopping cart of
a user is a specific to particular user so here we can use
servlet config&lt;/span&gt;&lt;/td&gt;
&lt;td style="padding-left: 4px; width: 402px; height: 72px;"&gt;&lt;span
style="font-weight: 400; font-family: verdana, geneva,
sans-serif; font-size: 14px;"&gt;To get the MIME type of a
file or application session related information is stored
using servlet context object.&lt;br&gt;
&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;code&gt;public String getServletInfo() {&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StringBuilder sb = new
StringBuilder();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
sb.append(getServletConfig().getServletName()).append("\n")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
.append(getServletConfig().getInitParameter("ConfigPar"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
sb.append("&amp;lt;h2&amp;gt;Context params&amp;lt;/h2&amp;gt;")&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
.append(getServletContext().getInitParameter("CtxPar"));&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return sb.toString();&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;br&gt;
&lt;br&gt;
&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</Answer>
</QA>
<QA>
<Question>Q27. What are the different methods of session management in servlets?</Question>
<Answer>What are the different methods of session management in servlets?
------------------------------------------------------------------------
Session is a conversational state between client and server and it can consists of multiple request and response 
between client and server. Since HTTP and Web Server both are stateless, the only way to maintain a session
is when some unique information about the session (session id) is passed between server and client in every request and response.

Some of the common ways of session management in servlets are:

1.    User Authentication
2.    HTML Hidden Field
3.    Cookies
4.   URL Rewriting
 5.  Session Management API</Answer>
</QA>
<QA>
<Question>Q28. What is JDBC Driver?</Question>
<Answer>JDBC Driver is a software component that enables java application to interact with the database. There are 4 types of JDBC drivers:

   - JDBC-ODBC bridge driver
   - Native-API driver (partially java driver)
   - Network Protocol driver (fully java driver)
   - Thin driver (fully java driver)

Pic: ![pic](https://cdn.edureka.co/blog/wp-content/uploads/2017/04/JDBC.png "Pic")</Answer>
</QA>
<QA>
<Question>Q29. What are the steps to connect to a database in java?</Question>
<Answer>Steps to connect to a database in java
-------------------------------

-    Registering the driver class
 -   Creating connection
  -  Creating statement
  -  Executing queries
  -  Closing connection</Answer>
</QA>
<QA>
<Question>Q30. What are the JDBC API components?</Question>
<Answer>The java.sql package contains interfaces and classes for JDBC API.
Interfaces:

    -  Connection
    -  Statement
    -  PreparedStatement
    -  ResultSet
    -  ResultSetMetaData
    -  DatabaseMetaData
    -  CallableStatement etc.

Classes:

    -  DriverManager
    -  Blob
    -  Clob
    -  Types
    -  SQLException etc.</Answer>
</QA>
<QA>
<Question>Q31. What is the role of JDBC DriverManager class?</Question>
<Answer>The DriverManager class manages the registered drivers. It can be used to register and unregister drivers. It provides factory method that returns the instance of Connection.</Answer>
</QA>
<QA>
<Question>Q32. What is JDBC Connection interface?</Question>
<Answer>&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h3 style="text-align: justify;"&gt;&lt;strong&gt;&lt;span style="font-size:
16px;"&gt;&lt;span style="font-family: verdana, geneva, sans-serif;"&gt;What
is JDBC Connection interface?&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;
&lt;p style="text-align: justify;"&gt;&lt;span style="font-family: verdana,
geneva, sans-serif; font-size: 14px;"&gt;&lt;span style="font-weight:
400;"&gt;The &lt;/span&gt;Connection interface&lt;span
style="font-weight: 400;"&gt; maintains a session with the
database. It can be used for transaction management. It
provides factory methods that returns the instance of
Statement, PreparedStatement, CallableStatement and
DatabaseMetaData.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 style="text-align: justify;"&gt;&lt;span style="font-family: verdana,
geneva, sans-serif; font-size: 16px;"&gt;&lt;strong&gt;&lt;img
class="aligncenter wp-image-45590 size-full"
src="https://cdn.edureka.co/blog/wp-content/uploads/2017/04/Connection-interface.png"
alt="ConnectionInterface - Java Interview Questions -
Edureka"
srcset="https://cdn.edureka.co/blog/wp-content/uploads/2017/04/Connection-interface.png
2946w,
https://cdn.edureka.co/blog/wp-content/uploads/2017/04/Connection-interface-150x29.png
150w,
https://cdn.edureka.co/blog/wp-content/uploads/2017/04/Connection-interface-300x58.png
300w,
https://cdn.edureka.co/blog/wp-content/uploads/2017/04/Connection-interface-768x148.png
768w,
https://cdn.edureka.co/blog/wp-content/uploads/2017/04/Connection-interface-528x102.png
528w,
https://cdn.edureka.co/blog/wp-content/uploads/2017/04/Connection-interface-590x114.png
590w" sizes="(max-width: 2946px) 100vw, 2946px" width="778"
height="150"&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;/body&gt;
&lt;/html&gt;</Answer>
</QA>
</qaList>
</ns2:knBase>
